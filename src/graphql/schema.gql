# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Where input for boolean type"""
input BooleanWhereInput {
  """List of AND conditions"""
  and: [BooleanWhereInput!]

  """Equal to"""
  eq: Boolean

  """Not equal to"""
  ne: Boolean

  """Negated condition"""
  not: BooleanWhereInput

  """List of OR conditions"""
  or: [BooleanWhereInput!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Where input for date type"""
input DateTimeWhereInput {
  """List of AND conditions"""
  and: [DateTimeWhereInput!]

  """Equal to anything in the list"""
  any: [DateTime!]

  """Value is between two values"""
  between: [DateTime!]

  """Equal to"""
  eq: DateTime

  """Greater than"""
  gt: DateTime

  """Greater than or equal to"""
  gte: DateTime

  """Equal to anything in the list"""
  in: [DateTime!]

  """Less than"""
  lt: DateTime

  """Less than or equal to"""
  lte: DateTime

  """Not equal to"""
  ne: DateTime

  """Negated condition"""
  not: DateTimeWhereInput

  """List of OR conditions"""
  or: [DateTimeWhereInput!]
}

type Device {
  bot: Boolean
  brand: String
  client: String
  ip: String
  model: String
  os: String
  type: String
}

input DeviceInput {
  bot: Boolean
  brand: String
  client: String
  ip: String
  model: String
  os: String
  type: String
}

""""""
input DeviceOrderInput {
  bot: OrderDirection
  brand: OrderDirection
  client: OrderDirection
  ip: OrderDirection
  model: OrderDirection
  os: OrderDirection
  type: OrderDirection
}

""""""
input DeviceWhereInput {
  bot: BooleanWhereInput
  brand: StringWhereInput
  client: StringWhereInput
  ip: StringWhereInput
  model: StringWhereInput
  os: StringWhereInput
  type: StringWhereInput
}

type Email {
  address: EmailAddress!
  createdAt: DateTime
  deletedAt: DateTime
  id: UUID!
  lastVerificationTry: DateTime
  updatedAt: DateTime
  user: User
  verificationCode: String
  verified: Boolean
}

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

input EmailCreateInput {
  address: EmailAddress!
  user: UserRefInput!
}

input EmailInput {
  address: EmailAddress!
  createdAt: DateTime
  deletedAt: DateTime
  id: UUID!
  lastVerificationTry: DateTime
  updatedAt: DateTime
  user: UserInput
  verificationCode: String
  verified: Boolean
}

""""""
input EmailOrderInput {
  address: OrderDirection
  createdAt: OrderDirection
  deletedAt: OrderDirection
  id: OrderDirection
  lastVerificationTry: OrderDirection
  updatedAt: OrderDirection
  user: UserOrderInput
  verificationCode: OrderDirection
  verified: OrderDirection
}

input EmailRefInput {
  id: UUID!
}

""""""
input EmailWhereInput {
  address: StringWhereInput
  createdAt: DateTimeWhereInput
  deletedAt: DateTimeWhereInput
  id: StringWhereInput
  lastVerificationTry: DateTimeWhereInput
  updatedAt: DateTimeWhereInput
  user: UserWhereInput
  verificationCode: StringWhereInput
  verified: BooleanWhereInput
}

""""""
type Emails {
  count: Int!
  set: [Email!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""Defines if the element is a node or an edge."""
enum LanguageElementType {
  """An edge element of the meta model."""
  EDGE

  """A node element of the meta model."""
  NODE
}

type MetaElement {
  aModel: JSON
  createdAt: DateTime
  defaultModel: JSON
  deletedAt: DateTime
  gModel: JSON
  id: UUID!
  metaModel: MetaModel!
  name: String
  preview: String
  tag: String!
  type: LanguageElementType
  updatedAt: DateTime
}

input MetaElementCreateInput {
  aModel: JSON
  defaultModel: JSON
  gModel: JSON
  metaModel: MetaModelRefInput!
  name: String
  preview: String
  tag: String!
  type: LanguageElementType
}

input MetaElementInput {
  aModel: JSON
  createdAt: DateTime
  defaultModel: JSON
  deletedAt: DateTime
  gModel: JSON
  id: UUID!
  metaModel: MetaModelInput!
  name: String
  preview: String
  tag: String!
  type: LanguageElementType
  updatedAt: DateTime
}

""""""
input MetaElementOrderInput {
  createdAt: OrderDirection
  deletedAt: OrderDirection
  id: OrderDirection
  metaModel: MetaModelOrderInput
  name: OrderDirection
  preview: OrderDirection
  tag: OrderDirection
  type: OrderDirection
  updatedAt: OrderDirection
}

input MetaElementUpdateInput {
  aModel: JSON
  defaultModel: JSON
  gModel: JSON
  id: UUID!
  name: String
  preview: String
  tag: String
  type: LanguageElementType
}

""""""
input MetaElementWhereInput {
  createdAt: DateTimeWhereInput
  deletedAt: DateTimeWhereInput
  id: StringWhereInput
  metaModel: MetaModelWhereInput
  name: StringWhereInput
  preview: StringWhereInput
  tag: StringWhereInput
  type: StringWhereInput
  updatedAt: DateTimeWhereInput
}

type MetaModel {
  collaborators: [User!]
  createdAt: DateTime
  deletedAt: DateTime
  id: UUID!
  logo: String
  metaElements: [MetaElement!]
  name: String
  owner: User
  tag: String!
  tags: [String!]
  updatedAt: DateTime
  version: SemVer!
}

input MetaModelCreateInput {
  logo: String
  name: String
  owner: UserRefInput!
  tag: String!
  tags: [String!]
}

input MetaModelInput {
  collaborators: [UserInput!]
  createdAt: DateTime
  deletedAt: DateTime
  id: UUID!
  logo: String
  metaElements: [MetaElementInput!]
  name: String
  owner: UserInput
  tag: String!
  tags: [String!]
  updatedAt: DateTime
  version: SemVer!
}

""""""
input MetaModelOrderInput {
  collaborators: UserOrderInput
  createdAt: OrderDirection
  deletedAt: OrderDirection
  id: OrderDirection
  logo: OrderDirection
  metaElements: MetaElementOrderInput
  name: OrderDirection
  owner: UserOrderInput
  tag: OrderDirection
  tags: OrderDirection
  updatedAt: OrderDirection
  version: OrderDirection
}

input MetaModelRefInput {
  id: UUID!
}

input MetaModelUpdateInput {
  id: UUID!
  logo: String
  name: String
  owner: UserRefInput
  tag: String
  tags: [String!]
}

""""""
input MetaModelWhereInput {
  collaborators: UserWhereInput
  createdAt: DateTimeWhereInput
  deletedAt: DateTimeWhereInput
  id: StringWhereInput
  logo: StringWhereInput
  metaElements: MetaElementWhereInput
  name: StringWhereInput
  owner: UserWhereInput
  tag: StringWhereInput
  tags: StringWhereInput
  updatedAt: DateTimeWhereInput
  version: StringWhereInput
}

""""""
type MetaModels {
  count: Int!
  set: [MetaModel!]
}

type Mutation {
  closeSession(id: UUID!): Session
  createEmail(emailCreateInput: EmailCreateInput!): Email
  createMetaElement(metaElementCreateInput: MetaElementCreateInput!): MetaElement
  createMetaModel(logoFile: Upload, metaModelCreateInput: MetaModelCreateInput!): MetaModel
  createUser(userCreateInput: UserCreateInput!): User
  deleteEmail(code: String!, id: UUID!, password: String!): UUID!
  deleteMetaModel(id: UUID!, password: String!): UUID!
  deleteUser(id: UUID!, password: String!): UUID!
  resetUserPassword(code: String!, newPassword: String!): User
  updateEmailVerificationCode(id: UUID!): Email
  updateMetaElement(metaElementUpdateInput: MetaElementUpdateInput!): MetaElement
  updateMetaModel(logoFile: Upload, metaModelUpdateInput: MetaModelUpdateInput!): MetaModel
  updateUser(avatarFile: Upload, userUpdateInput: UserUpdateInput!): User
  updateUserPassword(id: UUID!, newPassword: String!, password: String!): User
  updateUserPasswordCode(usernameOrEmail: String!): User
  updateUserPrimaryEmail(code: String!, email: EmailRefInput!, id: UUID!, password: String!): User
  updateUserVerificationCode(id: UUID!): User
  verifyEmail(code: String!, id: UUID!): Email
}

"""Defines the order direction."""
enum OrderDirection {
  """Ascending order."""
  ASC

  """Descending order."""
  DESC
}

"""Pagination generic input"""
input PaginationInput {
  """The number of items per page"""
  count: Int!

  """The page number"""
  page: Int!
}

type Profile {
  avatar: String
  bio: String
  location: String
  name: String
  publicEmail: Email
  url: String
}

input ProfileInput {
  avatar: String
  bio: String
  location: String
  name: String
  publicEmail: EmailInput
  url: String
}

""""""
input ProfileOrderInput {
  avatar: OrderDirection
  bio: OrderDirection
  location: OrderDirection
  name: OrderDirection
  publicEmail: EmailOrderInput
  url: OrderDirection
}

""""""
input ProfileWhereInput {
  avatar: StringWhereInput
  bio: StringWhereInput
  location: StringWhereInput
  name: StringWhereInput
  publicEmail: EmailWhereInput
  url: StringWhereInput
}

type Query {
  checkEmailAddressExists(address: String!): Boolean
  checkMetaModelTagExists(tag: String!): Boolean
  checkUserPassword(id: UUID!, password: String!): Boolean
  checkUserUsernameExists(username: String!): Boolean
  checkUserVerificationCode(code: String!, id: UUID!): Boolean
  email(id: UUID!): Email
  emails(order: [EmailOrderInput!], pagination: PaginationInput, where: [EmailWhereInput!]): Emails!

  """Login with username or email and password. Returns the token string."""
  login(password: String!, usernameOrEmail: String!): String!

  """Logout the current user. Close current session of device."""
  logout: Boolean!
  metaModel(id: UUID!): MetaModel
  metaModels(order: [MetaModelOrderInput!], pagination: PaginationInput, where: [MetaModelWhereInput!]): MetaModels!
  session(id: UUID!): Session
  sessions(order: [SessionOrderInput!], pagination: PaginationInput, where: [SessionWhereInput!]): Sessions!
  user(id: UUID!): User
  users(order: [UserOrderInput!], pagination: PaginationInput, where: [UserWhereInput!]): Users!
}

"""Defines wich permissions user has."""
enum Role {
  """Admin role can access to all application features."""
  ADMIN

  """User role can access to application basic features."""
  USER
}

"""A field whose value is a Semantic Version: https://semver.org"""
scalar SemVer

type Session {
  blockedAt: DateTime
  closedAt: DateTime
  createdAt: DateTime!
  device: Device
  id: UUID!
  lastActivity: DateTime!
  token: String!
  updatedAt: DateTime!
  user: User
}

input SessionInput {
  blockedAt: DateTime
  closedAt: DateTime
  createdAt: DateTime!
  device: DeviceInput
  id: UUID!
  lastActivity: DateTime! = "2024-11-07T14:16:28.757Z"
  token: String!
  updatedAt: DateTime!
  user: UserInput
}

""""""
input SessionOrderInput {
  blockedAt: OrderDirection
  closedAt: OrderDirection
  createdAt: OrderDirection
  device: DeviceOrderInput
  id: OrderDirection
  lastActivity: OrderDirection
  token: OrderDirection
  updatedAt: OrderDirection
  user: UserOrderInput
}

""""""
input SessionWhereInput {
  blockedAt: DateTimeWhereInput
  closedAt: DateTimeWhereInput
  createdAt: DateTimeWhereInput
  device: DeviceWhereInput
  id: StringWhereInput
  lastActivity: DateTimeWhereInput
  token: StringWhereInput
  updatedAt: DateTimeWhereInput
  user: UserWhereInput
}

""""""
type Sessions {
  count: Int!
  set: [Session!]
}

"""Where input for string type"""
input StringWhereInput {
  """List of AND conditions"""
  and: [StringWhereInput!]

  """Equal to anything in the list"""
  any: [String!]

  """Equal to"""
  eq: String

  """Case-sensitive pattern matching expression"""
  ilike: String

  """Equal to anything in the list"""
  in: [String!]

  """Pattern matching expression"""
  like: String

  """Not equal to"""
  ne: String

  """Negated condition"""
  not: StringWhereInput

  """List of OR conditions"""
  or: [StringWhereInput!]
}

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  collabMetaModels: [MetaModel!]
  createdAt: DateTime
  deletedAt: DateTime
  emails: [Email!]
  id: UUID!
  lastVerificationTry: DateTime
  ownMetaModels: [MetaModel!]
  password: String!
  passwordCode: String
  primaryEmail: Email
  profile: Profile
  role: Role
  sessions: [Session!]
  updatedAt: DateTime
  username: String!
  verificationCode: String
}

input UserCreateInput {
  email: EmailAddress!
  password: String!
  profile: ProfileInput
  role: Role
  username: String!
}

input UserInput {
  collabMetaModels: [MetaModelInput!]
  createdAt: DateTime
  deletedAt: DateTime
  emails: [EmailInput!]
  id: UUID!
  lastVerificationTry: DateTime
  ownMetaModels: [MetaModelInput!]
  password: String!
  passwordCode: String
  primaryEmail: EmailInput
  profile: ProfileInput
  role: Role
  sessions: [SessionInput!]
  updatedAt: DateTime
  username: String!
  verificationCode: String
}

""""""
input UserOrderInput {
  collabMetaModels: MetaModelOrderInput
  createdAt: OrderDirection
  deletedAt: OrderDirection
  emails: EmailOrderInput
  id: OrderDirection
  lastVerificationTry: OrderDirection
  ownMetaModels: MetaModelOrderInput
  passwordCode: OrderDirection
  primaryEmail: EmailOrderInput
  profile: ProfileOrderInput
  role: OrderDirection
  sessions: SessionOrderInput
  updatedAt: OrderDirection
  username: OrderDirection
  verificationCode: OrderDirection
}

input UserRefInput {
  id: UUID!
}

input UserUpdateInput {
  id: UUID!
  profile: ProfileInput
  role: Role
  username: String
}

""""""
input UserWhereInput {
  collabMetaModels: MetaModelWhereInput
  createdAt: DateTimeWhereInput
  deletedAt: DateTimeWhereInput
  emails: EmailWhereInput
  id: StringWhereInput
  lastVerificationTry: DateTimeWhereInput
  ownMetaModels: MetaModelWhereInput
  passwordCode: StringWhereInput
  primaryEmail: EmailWhereInput
  profile: ProfileWhereInput
  role: StringWhereInput
  sessions: SessionWhereInput
  updatedAt: DateTimeWhereInput
  username: StringWhereInput
  verificationCode: StringWhereInput
}

""""""
type Users {
  count: Int!
  set: [User!]
}